// Convert px to em
@use "sass:math";

@function em($pixels) {
  @return #{math.div($pixels, 16px)}em;
}

// Get a value from deep inside a map. Arguments:
// $map - name of map
// $keys - name of keys to retrieve. This can work with an infinitely nested map
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
    @if not $map {
      //@warn "`#{$key}` does not exist in the queried key."; // Redacted as this is not super useful, because we only have one key value and not the parent key
    }
  }
  @return $map;
}

// Test if map has all `$keys` nested with each others
// @author Hugo Giraudel
// @link https://www.sitepoint.com/extra-map-functions-sass/
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to test
// @return {Bool}
@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}

@function get-color($base, $shade: 500) {
  @if map-has-nested-keys($colors, $base, $shade) {
    $color: map-get(map-get($colors, $base), $shade);
    @return $color;
  } @else {
    @error "Key: '#{$base}', Value: '#{$shade}' not found in $colors map. Cancelling compile.";
  }
}

@function font-size($size) {
  @if map-has-key($type-scale, $size) {
    $font-size: map-get($type-scale, $size);
    @return $font-size;
  } @else {
    @error "Key: '#{$size}' not found in $type-scale map. Cancelling compile.";
  }
}

@function get-size($size) {
  @if map-has-key($sizing-system, $size) {
    $return-size: map-get($sizing-system, $size);
    @return $return-size;
  } @else {
    @error "Key: '#{$size}' not found in $sizing-system map. Cancelling compile.";
  }
}

// Returns a given number divided by 2
@function h($num) {
  @return $num * 0.5;
}

// Returns the negative value of a given number
@function n($num) {
  @return -$num;
}

// Returns the negative and halved value of a given number
@function nh($num) {
  @return n(h($num));
}
@function hn($num) {
  @return n(h($num));
}

// Lighten a colour progressively, much better than lighten()
@function tint($color, $percentage) {
  @return mix($color, white, $percentage);
}

// Darken a colour progressively, much better than darken()
@function shade($color, $percentage) {
  @return mix($color, black, $percentage);
}

// Allows us to use #{headings(1,6)} to apply css to all headings
@function headings($from: 1, $to: 6) {
  @if $from == $to {
    @return 'h#{$from}';
  } @else {
    @return 'h#{$from},' + headings($from + 1, $to);
  }
}

/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
 */
@function luminance($color) {
  $red: nth($linear-channel-values, red($color) + 1);
  $green: nth($linear-channel-values, green($color) + 1);
  $blue: nth($linear-channel-values, blue($color) + 1);

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 * @link https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
 */
@function calculate-contrast($back, $front) {
  $backLum: luminance($back) + 0.05;
  $foreLum: luminance($front) + 0.05;

  @return math.div(max($backLum, $foreLum), min($backLum, $foreLum));
}

/**
 * Determine whether to use dark or light text on top of given color.
 */
@function choose-contrast-color($color, $light-color: $color-white, $dark-color: $color-text) {
  $lightContrast: calculate-contrast($color, $light-color);
  $darkContrast: calculate-contrast($color, $dark-color);
  @if ($force-color-contrast-ratio == false) {
    @if ($lightContrast < 4.5 and $darkContrast < 4.5) {
      @warn "Neither #{$light-color} (#{$lightContrast}) nor #{$dark-color} (#{$darkContrast}) has a significant contrast to #{$color} to reach WCAG 2.1 AA compliance (4.5:1). Consider using a different colour. Alternatively set $force-color-contrast-ratio to true to have SASS take care of things.";
    }
  }
  @if ($force-color-contrast-ratio == true) {
    @if ($lightContrast < 4.5 and $darkContrast < 4.5) {
      // Let's try again, but this time we'll set the colors to black and white to try to force the accessibility.

      $light-color-was: $light-color;
      $lightContrast-was: $lightContrast;

      $dark-color-was: $dark-color;
      $darkContrast-was: $darkContrast;

      $light-color: #fff;
      $dark-color: #000;
      $lightContrast: calculate-contrast($color, $light-color);
      $darkContrast: calculate-contrast($color, $dark-color);
      //@warn "To meet WCAG 2.1 AA guidelines, Sass has calculated new contrast ratios for background color #{$color}. #{$light-color-was} (#{$lightContrast-was}) is now #{$light-color} (#{$lightContrast}) and #{$dark-color-was} (#{$darkContrast-was}) is now #{$dark-color} (#{$darkContrast}).";
    }
  }

  @if ($lightContrast > $darkContrast) {
    //@warn "The best contrast against #{$color} is light, which is #{$light-color}.";
    @return $light-color;
  } @else {
    // @warn "The best contrast against #{$color} is dark, which is #{$dark-color}.";
    @return $dark-color;
  }
}
