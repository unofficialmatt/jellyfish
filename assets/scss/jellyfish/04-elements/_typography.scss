// Headings

#{headings()} {
    font-family: $font-headings;
    margin: 0 0 $element-margin 0;
    line-height: $heading-line-height;
    color: $color-headings-preferred;
    &:not(:first-child) {
      margin-top: $element-margin;
      // TODO: Change this to instead add top margin by default and remove if .col + $heading
    }
}

h1 {
  @each $point, $size in $font-sizes-h1 {
    @if $point == 'root' {
      // Root font size at smallest device width
      font-size: $size;
    }
    @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
}

h2 {
    @each $point, $size in $font-sizes-h2 {
    @if $point == 'root' {
      // Root font size at smallest device width
      font-size: $size;
    }
    @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
}

h3 {
    @each $point, $size in $font-sizes-h3 {
    @if $point == 'root' {
      // Root font size at smallest device width
      font-size: $size;
    }
    @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
}

h4 {
    @each $point, $size in $font-sizes-h4 {
    @if $point == 'root' {
      // Root font size at smallest device width
      font-size: $size;
    }
    @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
}

h5 {
    @each $point, $size in $font-sizes-h5 {
    @if $point == 'root' {
      // Root font size at smallest device width
      font-size: $size;
    }
    @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
}

h6 {
    @each $point, $size in $font-sizes-h6 {
    @if $point == 'root' {
      // Root font size at smallest device width
      font-size: $size;
    }
    @else {
      // Otherwise use the breakpoint map to set the font size
      @include above($point) {
        font-size: $size;
      }
    }
  }
}

p, li, h1, h2, h3, h4, h5, h6 {
  word-break: break-word;
  hyphens: auto;
}
/* TEXT TRANSFORM */

small {
  display: block;
}
small {
    font-size: font-size('size-m1');
}
strong, b {
  font-weight: $weight-bold;
}
em, i {
  font-style: italic;
}

// Highlighted
mark {
    background: yellow;
    padding: .15em .3em;
    display: inline-block;
}

// Inserted text
ins {
    text-decoration: underline;
}

// Deleted text
del {
    text-decoration: line-through;
}

// Computer Output
samp {
    @extend %code;
}

// Abbreviation
abbr {
    border-bottom: $border-width dotted $color-text;
    cursor: help;
}

// Definition
dfn {
    font-style: italic;
}

// Citation
cite {
    font-style: italic;
}

// Inline Quote
q {
    font-style: italic;
    &::before, &::after {
        content:'"';
    }
}

%inline-code {
    @extend %code;
    font-size: font-size('size-m1');
    line-height: 1;
    border-radius: $border-radius;
    padding: .3em .35em;
}

// Keyboard Input
kbd {
    @extend %inline-code;
    background-color: $color-text;
    color: get-color(neutral,000);
}

// Code
:not(pre)>code {
    @extend %inline-code;
    background-color: get-color(neutral,200);
    color: $color-text;
}

// Variable
var {
    @extend %inline-code;
    background-color: get-color(neutral,200);
    font-style: italic;
    color: get-color(neutral,600);
}

// Subscript and Superscript
sub, sup {
    font-size: font-size('size-m2');
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}
sub {
    bottom: -0.25em;
}
sup {
    top: -.75em;
}
