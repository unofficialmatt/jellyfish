/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
  USEFUL MIXINS AND FUNCTIONS
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

// Convert px to em
@function em($pixels) {
    @return #{$pixels/16px}em;
}

// Get a value from deep inside a map. Arguments:
// $map - name of map
// $keys - name of keys to retrieve. This can work with an infinitely nested map
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
    @if not $map {
      //@warn "`#{$key}` does not exist in the queried key."; // Redacted as this is not super useful, because we only have one key value and not the parent key
    }
  }
  @return $map;
}

// Returns a given number divided by 2
@function h($num) {
  @return $num/2;
}

// Returns the negative value of a given number
@function n($num) {
  @return -$num;
}

// Returns the negative and halved value of a given number
@function nh($num) {
  @return n(h($num));
}
@function hn($num) {
  @return n(h($num));
}

// Media queries check the breakpoint map to see if a given string exists, else they convert a given pixel value to em.
@mixin above($min) {
    $bp-min: $min;
    @if map-has-key($breakpoints, $min) {
        $bp-min: map-deep-get($breakpoints, $min, 'breakpoint');
    }
    @else if (str-index(#{$min}, 'px')) {
      // Do nothing, move to next step
    }
    @else {
     @error "The specified breakpoint `#{$min}` does not exist in the breakpoint map. Compile stopping.";
    }
    @media (min-width: em($bp-min)) {
        @content;
    }
}
@mixin between($min, $max) {
    $bp-min: $min;
    @if map-has-key($breakpoints, $min) {
        $bp-min: map-deep-get($breakpoints, $min, 'breakpoint');
    }
    @else if (str-index(#{$min}, 'px')) {
      // Do nothing, move to next step
    }
    @else {
     @error "The specified breakpoint `#{$min}` does not exist in the breakpoint map. Compile stopping.";
    }
    $bp-max: $max;
    @if map-has-key($breakpoints, $max) {
        $bp-max: map-deep-get($breakpoints, $max, 'breakpoint');
    }
    @else if (str-index(#{$max}, 'px')) {
      // Do nothing, move to next step
    }
    @else {
     @error "The specified breakpoint `#{$max}` does not exist in the breakpoint map. Compile stopping.";
    }
    @media (min-width: em($bp-min)) and (max-width: em($bp-max - 1px)) {
        @content;
    }
}
@mixin below($max) {
    $bp-max: $max;
    @if map-has-key($breakpoints, $max) {
        $bp-max: map-deep-get($breakpoints, $max, 'breakpoint');
    }
    @else if (str-index(#{$max}, 'px')) {
      // Do nothing, move to next step
    }
    @else {
     @error "The specified breakpoint `#{$max}` does not exist in the breakpoint map. Compile stopping.";
    }
    @media (max-width: em($bp-max - 1px)) {
        @content;
    }
}

@mixin smooth($properties...) { // Global transition
    $result: (); // Create empty variable
    @each $property in $properties {
        // Loop through each argument and append to result variable
        $result: append($result, #{$property} $global-transition, comma);
    }
    transition: $result;
}

// Allows us to use #{headings(1,6)} to apply css to all headings
@function headings($from:1, $to:6) {
  @if $from == $to {
      @return 'h#{$from}';
  } @else {
      @return 'h#{$from},' + headings($from+1, $to);
  }
}

// Center a block level element without worrying about top and bottom margins
@mixin center-block {
  margin: {
      left: auto;
      right: auto;
  }
}

// DRY mixin for Pseudo elements. Pass optional args or leave as default
@mixin pseudo($content: '', $display: block, $pos: absolute){
  content: $content;
  display: $display;
  position: $pos;
}

// Do Not Print
@mixin do-not-print {
  @media print {
    display: none;
  }
}
