.container {
    margin: 0 auto;
    width: 100%;
    padding: 0 $base-container-gutter;
    .container {
      width: 100%;
      padding: 0 !important;
    }
}
.row {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    // Add negative margin to all rows, equal to half the col gutter - keeps things neatly aligned
    margin-left: -.5*$base-col-gutter;
    margin-right: -.5*$base-col-gutter;
}
.col {
    width: 100%;
    position: relative;
    // give our cols l-r margin equal to half col gutter
    padding-left: .5*$base-col-gutter;
    padding-right: .5*$base-col-gutter;
}

// Iterate for our smallest defined column class ($base-col-name)
@for $i from 1 through ($cols) {
    .col.#{$base-col-name}-#{$i} {
        max-width: ($one_col * $i);
        flex: 0 0 ($one_col * $i); // Define flex properties to fix the width of this col
    }
}

$loop_count: 1;
@each $point,
$i in $breakpoints {
    // for each breakpoint defined...
    @include above($point) {
        // if a breakpoint is found, set media query min-width
        .container {
            // give our container a width/max width, and padding to border content
            width: map-deep-get($breakpoints, $point, 'container-width');
            max-width: map-deep-get($breakpoints, $point, 'container-max-width');
            padding-left: map-deep-get($breakpoints, $point, 'container-gutter');
            padding-right: map-deep-get($breakpoints, $point, 'container-gutter');
        }

        .row {
            // give our rows negative margin equal to half col gutter
            margin-left: -.5*(map-deep-get($breakpoints, $point, 'col-gutter'));
            margin-right: -.5*(map-deep-get($breakpoints, $point, 'col-gutter'));
        }

        .col {
            // give our cols l-r margin equal to half col gutter
            padding-left: .5*map-deep-get($breakpoints, $point, 'col-gutter');
            padding-right: .5*map-deep-get($breakpoints, $point, 'col-gutter');
            @if $loop_count == 1 {
            max-width: 100%;
            flex: 1 1 0px; // Ensures that if there are no breakpoint settings defined, columns fill available space on the row
            }
        }
    }
    $last: $point; // Store the current point to be used on the next loop
    $loop_count: $loop_count+1; // Increment loop count
}
