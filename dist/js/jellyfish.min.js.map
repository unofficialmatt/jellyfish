{"version":3,"sources":["accessibility.js","cookies.js","debounce.js","debug.js","lazyload-bg.js","breakpoints.js","modals.js","navbar.js","responsive-tables.js"],"names":["changeRootFontSize","fontSize","document","body","classList","remove","add","querySelectorAll","forEach","button","activeButton","querySelector","jfSetCookie","name","value","days","date","expires","Date","setTime","getTime","toUTCString","cookie","encodeURIComponent","jfGetCookie","cookiename","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","jfDestroyCookie","jfDebounceHandle","func","timeout","let","timer","args","clearTimeout","setTimeout","apply","this","jfDebounce","event","handler","Array","isArray","debouncedHandler","window","addEventListener","jfDebug","getElementsByTagName","toggle","jfLazyLoadBackgroundImage","element","bgImage","getAttribute","style","backgroundImage","removeAttribute","contains","breakPoints","navBar","sm","md","lg","xl","lazyBackgroundElements","slice","call","lazyBackgroundObserver","IntersectionObserver","entries","observer","entry","isIntersecting","target","unobserve","rootMargin","lazyBackground","observe","jellyfishModals","constructor","currentModalId","modalTimer","modalInterval","incrementTimer","bind","toggleModal","openModal","closeModal","id","closeCurrent","getElementById","dialog","close","CustomEvent","detail","closedModalId","dispatchEvent","dataLayer","push","modalId","timeOpen","showModal","clearInterval","setInterval","newModalId","scrollTo","dialogDimensions","getBoundingClientRect","e","clientX","left","right","clientY","top","bottom","tagName","initializeModalGroup","appendCloseButton","modalGroup","dataset","modalgroup","groupElements","groupElement","index","appendArrows","closeButton","createElement","setAttribute","append","wrapper","prevLink","prevButton","createArrow","nextLink","appendChild","nextButton","label","onclick","handleKeyDown","repeat","key","click","modalManager","jfGetNavbarType","navmenu","jfToggleNavBar","navbar","navbarType","navbarHamburgers","display","hamburger","expanded","closest","matches","innerWidth","preventDefault","parentElement","activeNavMenus","tables","thead","tbody","ths","thsArray","j","innerHTML","trs","k","tds","l"],"mappings":"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","file":"jellyfish.min.js","sourcesContent":["function changeRootFontSize(fontSize) {\n  document.body.classList.remove(\n    \"font-size-sm\",\n    \"font-size-md\",\n    \"font-size-lg\"\n  );\n  document.body.classList.add(\"font-size-\" + fontSize);\n\n  var fontButtons = document.querySelectorAll(\"button.font-size\");\n\n  fontButtons.forEach(function (button) {\n    button.classList.remove(\"active\");\n  });\n\n  var activeButton = document.querySelector(\"button.font-size-\" + fontSize);\n  if (activeButton) {\n    activeButton.classList.add(\"active\");\n  }\n\n  jfSetCookie(\"fontsize\", fontSize);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  /**\n   * Function to allow the user to change the root font-size to increase legibility.\n   */\n  var fontButtons = document.querySelectorAll(\"button.font-size\");\n\n  fontButtons.forEach(function (button) {\n    button.addEventListener(\"click\", function () {\n      var fontSize = button.classList.contains(\"font-size-sm\")\n        ? \"sm\"\n        : button.classList.contains(\"font-size-md\")\n        ? \"md\"\n        : button.classList.contains(\"font-size-lg\")\n        ? \"lg\"\n        : null;\n\n      if (fontSize) {\n        changeRootFontSize(fontSize);\n      }\n    });\n  });\n\n  /**\n   * Check for Accessibility cookies 'fontsize' and 'ui-mode' on document ready.\n   * Append appropriate classes to body element.\n   */\n  var docFontSize = jfGetCookie(\"fontsize\");\n  switch (docFontSize) {\n    case \"sm\":\n      changeRootFontSize(\"sm\");\n      break;\n    case \"md\":\n      changeRootFontSize(\"md\");\n      break;\n    case \"lg\":\n      changeRootFontSize(\"lg\");\n      break;\n    default:\n      break;\n  }\n});\n","/**\n * Creates a cookie\n * @param {string} name\n * @param {string} value\n * @param {number} days before expiry (optional)\n */\nfunction jfSetCookie(name, value, days) {\n  var expires;\n  if (days) {\n    var date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    expires = \";expires=\" + date.toUTCString();\n  }\n  else {\n    expires = \"\";\n  }\n  // Sets the cookie site-wide with path=/\n  document.cookie = name + \"=\" + encodeURIComponent(value) + expires + \";path=/\";\n}\n\n/**\n * Reads and returns the value of a cookie\n * @param {string} cookiename\n */\nfunction jfGetCookie(cookiename) {\n  var name = cookiename + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\n/**\n * Destroys a cookie\n */\nfunction jfDestroyCookie(name) {\n  document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n}\n","function jfDebounceHandle(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n\nfunction jfDebounce(event, handler, timeout = 300, args = []) {\n  if (Array.isArray(timeout)) {\n    args = timeout;\n    timeout = 300;\n  }\n  const debouncedHandler = jfDebounceHandle(() => handler(...args), timeout);\n  window.addEventListener(event, debouncedHandler);\n}\n","function jfDebug() {\n  // Trigger debug mode by applying .jf-debug to document\n  var docBody = document.getElementsByTagName(\"body\")[0];\n  docBody.classList.toggle(\"jf-debug\");\n}\n","/**\n * Lazy Load of BG Images\n * Forked from @link https://web.dev/lazy-loading-images/\n */\n\nfunction jfLazyLoadBackgroundImage(element) {\n  var bgImage = element.getAttribute('data-bg-img');\n  element.style.backgroundImage = \"url(\"+bgImage+\")\";\n  element.removeAttribute('data-bg-img');\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyBackgroundElements = [].slice.call(document.querySelectorAll(\".has-bg-img\"));\n\n  if(\"IntersectionObserver\" in window) {\n    let lazyBackgroundObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          jfLazyLoadBackgroundImage(entry.target);\n          lazyBackgroundObserver.unobserve(entry.target);\n        }\n      });\n    }, {rootMargin: \"0px 0px 300px 0px\"}); // Pre-empt by loading 300px early\n\n    lazyBackgroundElements.forEach(function(lazyBackground) {\n      lazyBackgroundObserver.observe(lazyBackground);\n    });\n  }\n  else {\n    // For browsers that don't support intersection observer, load all images straight away\n    lazyBackgroundElements.forEach(function(lazyBackground){\n      jfLazyLoadBackgroundImage(lazyBackground);\n    });\n  }\n});\n","// Only declare if not already declared\nif (typeof breakPoints === \"undefined\") {\n  breakPoints = {\n    navBar: 1200,\n    sm: 600,\n    md: 900,\n    lg: 1200,\n    xl: 1800,\n  };\n}\n","class jellyfishModals {\n  constructor() {\n    this.currentModalId = null;\n    this.modalTimer = 0;\n    this.modalInterval = null;\n\n    // Bind the method to the class as it wasn't working otherwise\n    this.incrementTimer = this.incrementTimer.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  /**\n   * Increments the this.modalTimer by 1 every second.\n   * @returns {void}\n   */\n  incrementTimer() {\n    this.modalTimer += 1;\n  }\n\n  /**\n   * Toggles the visibility of a modal.\n   * @param {string} id - The ID of the modal to toggle.\n   * @param {boolean} closeCurrent - Whether to close the current modal before opening the new one.\n   * @returns {void}\n   */\n  toggleModal(id, closeCurrent = false) {\n    if (closeCurrent) {\n      this.closeModal();\n    }\n\n    const dialog = document.getElementById(id);\n\n    if (dialog) {\n      if (this.currentModalId === id) {\n        this.closeModal();\n      } else {\n        this.openModal(id);\n      }\n    }\n  }\n\n  /**\n   * Closes the currently open modal.\n   * @returns {void}\n   */\n  closeModal() {\n    const dialog = document.getElementById(this.currentModalId);\n\n    if (dialog) {\n      dialog.close();\n\n      // Fire an event jfModalClosed\n      const event = new CustomEvent(\"jfModalClosed\", {\n        detail: {\n          closedModalId: this.currentModalId,\n        },\n      });\n      document.dispatchEvent(event);\n\n      // Dispatch an Event to the DataLayer\n      window.dataLayer = window.dataLayer || [];\n\n      dataLayer.push({\n        event: \"modalClosed\",\n        modalId: \"#\" + this.currentModalId,\n        timeOpen: this.modalTimer,\n      });\n\n      this.currentModalId = null;\n\n      if (document.body.classList.contains(\"has-open-modal\")) {\n        document.body.classList.remove(\"has-open-modal\");\n      }\n    }\n  }\n\n  /**\n   * Opens a modal with the specified ID.\n   * @param {string} id - The ID of the modal to open.\n   * @param {boolean} closeCurrent - Whether to close the current modal before opening the new one.\n   * @returns {void}\n   */\n  openModal(id, closeCurrent = false) {\n    if (closeCurrent) {\n      this.closeModal();\n    }\n\n    const dialog = document.getElementById(id);\n\n    if (dialog) {\n      dialog.showModal();\n      this.currentModalId = id;\n\n      // Clear the previous interval if it exists\n      this.modalTimer = 0;\n      if (this.modalInterval) {\n        clearInterval(this.modalInterval);\n      }\n      this.modalInterval = setInterval(this.incrementTimer, 1000);\n\n      // Fire an event jfModalOpened\n      const event = new CustomEvent(\"jfModalOpened\", {\n        detail: {\n          newModalId: id,\n        },\n      });\n      document.dispatchEvent(event);\n\n      // Scroll to the top of the .modal-content element if it exists\n      if (dialog.querySelector(\".modal-content\"))\n        dialog.querySelector(\".modal-content\").scrollTo(0, 0);\n\n      // Close Modal if user clicks on the overlay\n      dialog.addEventListener(\"click\", (e) => {\n        const dialogDimensions = dialog.getBoundingClientRect();\n        if (\n          e.clientX < dialogDimensions.left ||\n          e.clientX > dialogDimensions.right ||\n          e.clientY < dialogDimensions.top ||\n          e.clientY > dialogDimensions.bottom\n        ) {\n          // Get e.target\n          const target = e.target;\n          // If e.target is not a button, close the modal\n          if (target.tagName !== \"BUTTON\") {\n            this.closeModal();\n          }\n        }\n      });\n\n      // Append navigation arrows and close button if it's a .modal element\n      if (dialog.classList.contains(\"modal\")) {\n        this.initializeModalGroup(dialog);\n        this.appendCloseButton(dialog);\n      }\n\n      // Dispatch an Event to the DataLayer\n      window.dataLayer = window.dataLayer || [];\n\n      dataLayer.push({\n        event: \"modalOpened\",\n        modalId: \"#\" + id,\n      });\n\n      // Add has-open-modal class to body\n      if (!document.body.classList.contains(\"has-open-modal\")) {\n        document.body.classList.add(\"has-open-modal\");\n      }\n    }\n  }\n\n  /**\n   * Appends navigation arrows to all modals in the same group as the given element.\n   * @param {HTMLElement} element - The modal element.\n   * @returns {void}\n   */\n  initializeModalGroup(element) {\n    const modalGroup = element.dataset.modalgroup;\n\n    // If the modal does not belong to a group, or it already has navigation arrows, return\n    if (!modalGroup || element.querySelector(\".modal-navigation\")) {\n      return;\n    }\n\n    const groupElements = document.querySelectorAll(\n      `[data-modalgroup=\"${modalGroup}\"]`\n    );\n\n    // Append navigation arrows to each element in the group\n    groupElements.forEach((groupElement, index) => {\n      this.appendArrows(groupElement, index, groupElements);\n    });\n  }\n  /**\n   * Appends a close button to a modal if one does not already exist.\n   * This is triggered on the modalOpen element, so that if modals are added dynamically, they will still have a close button.\n   * @param {HTMLElement} element - The modal to append a close button to.\n   * @returns {void}\n   */\n  appendCloseButton(element) {\n    if (!element.querySelector(\".modal-close\")) {\n      const closeButton = document.createElement(\"button\");\n      closeButton.classList.add(\"modal-close\");\n      closeButton.addEventListener(\"click\", this.closeModal);\n      closeButton.setAttribute(\"title\", \"Close this modal\");\n      element.append(closeButton);\n    }\n  }\n\n  /**\n   * Appends navigation arrows to a modal if it belongs to a group.\n   * @param {HTMLElement} element - The modal to append navigation arrows to.\n   * @param {number} index - The index of the modal in the group.\n   * @param {NodeList} modalGroup - The group of modals.\n   * @returns {void}\n   */\n  appendArrows(element, index, modalGroup) {\n    const wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"modal-navigation\");\n\n    // Create the previous button\n    const prevLink =\n      modalGroup[index === 0 ? modalGroup.length - 1 : index - 1];\n    const prevButton = this.createArrow(\n      \"Previous (Left arrow key)\",\n      `toggleModal('${prevLink.id}', true);`\n    );\n    prevButton.classList.add(\"modal-navigation--prev\");\n    wrapper.appendChild(prevButton);\n\n    // Create the next button\n    const nextLink =\n      modalGroup[index === modalGroup.length - 1 ? 0 : index + 1];\n    const nextButton = this.createArrow(\n      \"Next (Right arrow key)\",\n      `toggleModal('${nextLink.id}', true);`\n    );\n    nextButton.classList.add(\"modal-navigation--next\");\n    wrapper.appendChild(nextButton);\n\n    // Append the wrapper to the modal\n    element.appendChild(wrapper);\n  }\n\n  /**\n   * Creates a navigation button with the specified label and onclick attribute.\n   * @param {string} label - The label of the button.\n   * @param {string} onclick - The onclick attribute value.\n   * @returns {HTMLButtonElement} - The created button element.\n   */\n  createArrow(label, onclick) {\n    const button = document.createElement(\"button\");\n    button.classList.add(\"modal-navigation-button\");\n    button.setAttribute(\"onclick\", onclick);\n    button.setAttribute(\"title\", label);\n    return button;\n  }\n\n  /**\n   * Handles keyDown events\n   * @param {object} event - The event object.\n   * @returns\n   */\n  handleKeyDown(event) {\n    // Return if there is no open modal\n    if (!this.currentModalId) return;\n\n    if (event.repeat) return; // Prevents the event from firing multiple times if the user holds down the key\n\n    if (event.key === \"Escape\" && this.currentModalId) {\n      this.closeModal();\n    } else if (event.key === \"ArrowLeft\" && this.currentModalId) {\n      const dialog = document.getElementById(this.currentModalId);\n      if (dialog) {\n        // Find if it has a .modal-navigation--prev button\n        const prevButton = dialog.querySelector(\".modal-navigation--prev\");\n        if (prevButton) {\n          prevButton.click();\n        }\n      }\n    } else if (event.key === \"ArrowRight\" && this.currentModalId) {\n      const dialog = document.getElementById(this.currentModalId);\n      if (dialog) {\n        // Find if it has a .modal-navigation--next button\n        const nextButton = dialog.querySelector(\".modal-navigation--next\");\n        if (nextButton) {\n          nextButton.click();\n        }\n      }\n    }\n  }\n}\n\n// Initialize the class\nconst modalManager = new jellyfishModals();\n\n// Expose toggleModal outside the class\nconst toggleModal = (id, closeCurrent) =>\n  modalManager.toggleModal(id, closeCurrent);\n\n// Add eventListener for keydown\ndocument.addEventListener(\"keydown\", (event) =>\n  modalManager.handleKeyDown(event)\n);\n\n// TODO: Test that GTag events are firing correctly when modals are opened and closed\n","function jfGetNavbarType(navmenu) {\n  if (navmenu.classList.contains(\"is-off-canvas\")) {\n    return \"off-canvas\";\n  } else {\n    return \"drop-down\";\n  }\n}\n\nfunction jfToggleNavBar(navbar, navbarType) {\n  // VARS\n  var navmenu = navbar.querySelector(\".navbar-menu\"),\n    navbarHamburgers = navbar.querySelectorAll(\".hamburger\");\n\n  // Only run if navbar exists\n  if (!navmenu) {\n    return;\n  }\n\n  // If navmenu doesnt have a data-attr type,\n\n  if (navbarType === \"off-canvas\") {\n    if (navmenu.classList.contains(\"is-active\")) {\n      navmenu.classList.add(\"closing\");\n      setTimeout(function () {\n        navmenu.classList.remove(\"closing\");\n      }, 550);\n    }\n    document.body.classList.toggle(\"has-active-nav\");\n  } else if (navbarType === \"drop-down\") {\n    // Set display of navbar\n    navmenu.style.display =\n      navmenu.style.display === \"none\" || navmenu.style.display === \"\"\n        ? \"block\"\n        : \"none\";\n  }\n\n  // Update hamburgers to reflect current state of menu\n  if (navbarHamburgers.length) {\n    navbarHamburgers.forEach(function (hamburger) {\n      var expanded = hamburger.getAttribute(\"aria-expanded\") === \"true\";\n      hamburger.setAttribute(\"aria-expanded\", expanded ? \"false\" : \"true\");\n      hamburger.classList.toggle(\"is-active\", !expanded);\n    });\n  }\n\n  // Toggle active class on navbar and body\n  navmenu.classList.toggle(\"is-active\");\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var navbarHamburgers = document.querySelectorAll(\".navbar .hamburger\");\n\n  navbarHamburgers.forEach(function (hamburger) {\n    hamburger.addEventListener(\"click\", function (e) {\n      var navbar = this.closest(\".navbar\"),\n        navmenu = navbar.querySelector(\".navbar-menu\");\n\n      if (navmenu) {\n        var navbarType = jfGetNavbarType(navmenu);\n        jfToggleNavBar(navbar, navbarType);\n      }\n    });\n  });\n\n  // If a menu item with children is clicked...\n  document.addEventListener(\"click\", function (e) {\n    var target = e.target;\n    if (\n      target.matches(\n        \"li.has-children > a:not(.clicked), li.menu-item-has-children > a:not(.clicked)\"\n      )\n    ) {\n      // ...and the window width is smaller than the breakPoints.navBar\n      if (window.innerWidth < breakPoints.navBar) {\n        // add .clicked class to the anchor element\n        target.classList.add(\"clicked\");\n        // prevent the link from firing\n        e.preventDefault();\n        // add .drop-active class and aria-expanded to parent li\n        target.parentElement.classList.toggle(\"drop-active\");\n        target.parentElement.setAttribute(\n          \"aria-expanded\",\n          target.parentElement.classList.contains(\"drop-active\")\n            ? \"true\"\n            : \"false\"\n        );\n      }\n    }\n  });\n});\n\n// Listen for escape key press\ndocument.addEventListener(\"keydown\", function (e) {\n  if (e.key === \"Escape\") {\n    // See if there are any .navbar-menu elements that are active\n    var activeNavMenus = document.querySelectorAll(\".navbar-menu.is-active\");\n\n    // If there are none, return\n    if (!activeNavMenus.length) {\n      return;\n    }\n\n    activeNavMenus.forEach(function (navmenu) {\n      // Get the navbar\n      var navbar = navmenu.closest(\".navbar\");\n\n      var navbarType = jfGetNavbarType(navmenu);\n      jfToggleNavBar(navbar, navbarType);\n    });\n  }\n});\n\n// Detect click outside of navbar and close it\ndocument.addEventListener(\"click\", function (e) {\n  // if body doesnt have .has-active-nav, return default behavior\n  if (!document.body.classList.contains(\"has-active-nav\")) {\n    return;\n  }\n\n  // Is e.target inside .navbar-menu or .hamburger, if so, return\n  if (e.target.closest(\".navbar-menu\") || e.target.closest(\".hamburger\")) {\n    return;\n  }\n\n  // Otherwise we need to close the navbar\n  var activeNavMenus = document.querySelectorAll(\".navbar-menu.is-active\");\n\n  // If there are none, return\n  if (!activeNavMenus.length) {\n    return;\n  }\n\n  activeNavMenus.forEach(function (navmenu) {\n    // Get the navbar\n    var navbar = navmenu.closest(\".navbar\");\n\n    // Get the navbar type\n    var navbarType;\n\n    if (navmenu.classList.contains(\"is-off-canvas\")) {\n      navbarType = \"off-canvas\";\n    } else {\n      navbarType = \"drop-down\";\n    }\n\n    // Close the navbar\n    jfToggleNavBar(navbar, navbarType);\n  });\n});\n","document.addEventListener(\"DOMContentLoaded\", function () {\n  var tables = document.querySelectorAll(\".is-responsive\");\n  if (tables.length > 0) {\n    // Loop through them\n    for (var i = 0; i < tables.length; i++) {\n      var thead = tables[i].querySelector(\"thead\");\n      var tbody = tables[i].querySelector(\"tbody\");\n      if (thead && tbody) {\n        // Get the innerhtml of all th elements inside the thead into an array\n        var ths = thead.querySelectorAll(\"th\");\n        var thsArray = [];\n        for (var j = 0; j < ths.length; j++) {\n          thsArray.push(ths[j].innerHTML);\n        }\n        if (thsArray.length > 0) {\n          // Loop through all tr elements inside the tbody\n          var trs = tbody.querySelectorAll(\"tr\");\n          for (var k = 0; k < trs.length; k++) {\n            // Loop through all td elements inside the tr\n            var tds = trs[k].querySelectorAll(\"td\");\n            for (var l = 0; l < tds.length; l++) {\n              // Add the th innerhtml as a data attribute to the td\n              tds[l].setAttribute(\"data-label\", thsArray[l]);\n            }\n          }\n        }\n      }\n    }\n  }\n});\n"]}