{"version":3,"sources":["accessibility.js","cookies.js","debug.js","lazyload-bg.js","breakpoints.js","modals.js","navbar.js","responsive-tables.js"],"names":["changeRootFontSize","fontSize","document","body","classList","remove","add","querySelectorAll","forEach","button","activeButton","querySelector","jfSetCookie","name","value","days","date","expires","Date","setTime","getTime","toUTCString","cookie","encodeURIComponent","jfGetCookie","cookiename","ca","decodeURIComponent","split","i","length","c","charAt","substring","indexOf","jfDestroyCookie","jfDebug","getElementsByTagName","toggle","jfLazyLoadBackgroundImage","element","bgImage","getAttribute","style","backgroundImage","removeAttribute","addEventListener","contains","breakPoints","navBar","sm","md","lg","xl","lazyBackgroundElements","slice","call","window","let","lazyBackgroundObserver","IntersectionObserver","entries","observer","entry","isIntersecting","target","unobserve","rootMargin","lazyBackground","observe","jellyfishModals","constructor","this","currentModalId","modalTimer","modalInterval","incrementTimer","bind","toggleModal","openModal","closeModal","id","closeCurrent","getElementById","dialog","close","event","CustomEvent","detail","closedModalId","dispatchEvent","dataLayer","push","modalId","timeOpen","showModal","clearInterval","setInterval","newModalId","scrollTo","dialogDimensions","getBoundingClientRect","e","clientX","left","right","clientY","top","bottom","tagName","initializeModalGroup","appendCloseButton","modalGroup","dataset","modalgroup","groupElements","groupElement","index","appendArrows","closeButton","createElement","setAttribute","append","wrapper","prevLink","prevButton","createArrow","nextLink","appendChild","nextButton","label","onclick","handleKeyDown","repeat","key","click","modalManager","hamburger","navbar","closest","navmenu","navbarHamburgers","setTimeout","display","expanded","matches","innerWidth","preventDefault","parentElement","tables","thead","tbody","ths","thsArray","j","innerHTML","trs","k","tds","l"],"mappings":"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","file":"jellyfish.min.js","sourcesContent":["function changeRootFontSize(fontSize) {\n  document.body.classList.remove(\n    \"font-size-sm\",\n    \"font-size-md\",\n    \"font-size-lg\"\n  );\n  document.body.classList.add(\"font-size-\" + fontSize);\n\n  var fontButtons = document.querySelectorAll(\"button.font-size\");\n\n  fontButtons.forEach(function (button) {\n    button.classList.remove(\"active\");\n  });\n\n  var activeButton = document.querySelector(\"button.font-size-\" + fontSize);\n  if (activeButton) {\n    activeButton.classList.add(\"active\");\n  }\n\n  jfSetCookie(\"fontsize\", fontSize);\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  /**\n   * Function to allow the user to change the root font-size to increase legibility.\n   */\n  var fontButtons = document.querySelectorAll(\"button.font-size\");\n\n  fontButtons.forEach(function (button) {\n    button.addEventListener(\"click\", function () {\n      var fontSize = button.classList.contains(\"font-size-sm\")\n        ? \"sm\"\n        : button.classList.contains(\"font-size-md\")\n        ? \"md\"\n        : button.classList.contains(\"font-size-lg\")\n        ? \"lg\"\n        : null;\n\n      if (fontSize) {\n        changeRootFontSize(fontSize);\n      }\n    });\n  });\n\n  /**\n   * Check for Accessibility cookies 'fontsize' and 'ui-mode' on document ready.\n   * Append appropriate classes to body element.\n   */\n  var docFontSize = jfGetCookie(\"fontsize\");\n  switch (docFontSize) {\n    case \"sm\":\n      changeRootFontSize(\"sm\");\n      break;\n    case \"md\":\n      changeRootFontSize(\"md\");\n      break;\n    case \"lg\":\n      changeRootFontSize(\"lg\");\n      break;\n    default:\n      break;\n  }\n});\n","/**\n * Creates a cookie\n * @param {string} name\n * @param {string} value\n * @param {number} days before expiry (optional)\n */\nfunction jfSetCookie(name, value, days) {\n  var expires;\n  if (days) {\n    var date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    expires = \";expires=\" + date.toUTCString();\n  }\n  else {\n    expires = \"\";\n  }\n  // Sets the cookie site-wide with path=/\n  document.cookie = name + \"=\" + encodeURIComponent(value) + expires + \";path=/\";\n}\n\n/**\n * Reads and returns the value of a cookie\n * @param {string} cookiename\n */\nfunction jfGetCookie(cookiename) {\n  var name = cookiename + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for (var i = 0; i < ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\n/**\n * Destroys a cookie\n */\nfunction jfDestroyCookie(name) {\n  document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';\n}\n","function jfDebug() {\n  // Trigger debug mode by applying .jf-debug to document\n  var docBody = document.getElementsByTagName(\"body\")[0];\n  docBody.classList.toggle(\"jf-debug\");\n}\n","/**\n * Lazy Load of BG Images\n * Forked from @link https://web.dev/lazy-loading-images/\n */\n\nfunction jfLazyLoadBackgroundImage(element) {\n  var bgImage = element.getAttribute('data-bg-img');\n  element.style.backgroundImage = \"url(\"+bgImage+\")\";\n  element.removeAttribute('data-bg-img');\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyBackgroundElements = [].slice.call(document.querySelectorAll(\".has-bg-img\"));\n\n  if(\"IntersectionObserver\" in window) {\n    let lazyBackgroundObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          jfLazyLoadBackgroundImage(entry.target);\n          lazyBackgroundObserver.unobserve(entry.target);\n        }\n      });\n    }, {rootMargin: \"0px 0px 300px 0px\"}); // Pre-empt by loading 300px early\n\n    lazyBackgroundElements.forEach(function(lazyBackground) {\n      lazyBackgroundObserver.observe(lazyBackground);\n    });\n  }\n  else {\n    // For browsers that don't support intersection observer, load all images straight away\n    lazyBackgroundElements.forEach(function(lazyBackground){\n      jfLazyLoadBackgroundImage(lazyBackground);\n    });\n  }\n});\n","// Only declare if not already declared\nif (typeof breakPoints === \"undefined\") {\n  breakPoints = {\n    navBar: 1200,\n    sm: 600,\n    md: 900,\n    lg: 1200,\n    xl: 1800,\n  };\n}\n","class jellyfishModals {\n  constructor() {\n    this.currentModalId = null;\n    this.modalTimer = 0;\n    this.modalInterval = null;\n\n    // Bind the method to the class as it wasn't working otherwise\n    this.incrementTimer = this.incrementTimer.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  /**\n   * Increments the this.modalTimer by 1 every second.\n   * @returns {void}\n   */\n  incrementTimer() {\n    this.modalTimer += 1;\n  }\n\n  /**\n   * Toggles the visibility of a modal.\n   * @param {string} id - The ID of the modal to toggle.\n   * @param {boolean} closeCurrent - Whether to close the current modal before opening the new one.\n   * @returns {void}\n   */\n  toggleModal(id, closeCurrent = false) {\n    if (closeCurrent) {\n      this.closeModal();\n    }\n\n    const dialog = document.getElementById(id);\n\n    if (dialog) {\n      if (this.currentModalId === id) {\n        this.closeModal();\n      } else {\n        this.openModal(id);\n      }\n    }\n  }\n\n  /**\n   * Closes the currently open modal.\n   * @returns {void}\n   */\n  closeModal() {\n    const dialog = document.getElementById(this.currentModalId);\n\n    if (dialog) {\n      dialog.close();\n\n      // Fire an event jfModalClosed\n      const event = new CustomEvent(\"jfModalClosed\", {\n        detail: {\n          closedModalId: this.currentModalId,\n        },\n      });\n      document.dispatchEvent(event);\n\n      // Dispatch an Event to the DataLayer\n      window.dataLayer = window.dataLayer || [];\n\n      dataLayer.push({\n        event: \"modalClosed\",\n        modalId: \"#\" + this.currentModalId,\n        timeOpen: this.modalTimer,\n      });\n\n      this.currentModalId = null;\n\n      if (document.body.classList.contains(\"has-open-modal\")) {\n        document.body.classList.remove(\"has-open-modal\");\n      }\n    }\n  }\n\n  /**\n   * Opens a modal with the specified ID.\n   * @param {string} id - The ID of the modal to open.\n   * @param {boolean} closeCurrent - Whether to close the current modal before opening the new one.\n   * @returns {void}\n   */\n  openModal(id, closeCurrent = false) {\n    if (closeCurrent) {\n      this.closeModal();\n    }\n\n    const dialog = document.getElementById(id);\n\n    if (dialog) {\n      dialog.showModal();\n      this.currentModalId = id;\n\n      // Clear the previous interval if it exists\n      this.modalTimer = 0;\n      if (this.modalInterval) {\n        clearInterval(this.modalInterval);\n      }\n      this.modalInterval = setInterval(this.incrementTimer, 1000);\n\n      // Fire an event jfModalOpened\n      const event = new CustomEvent(\"jfModalOpened\", {\n        detail: {\n          newModalId: id,\n        },\n      });\n      document.dispatchEvent(event);\n\n      // Scroll to the top of the .modal-content element if it exists\n      if (dialog.querySelector(\".modal-content\"))\n        dialog.querySelector(\".modal-content\").scrollTo(0, 0);\n\n      // Close Modal if user clicks on the overlay\n      dialog.addEventListener(\"click\", (e) => {\n        const dialogDimensions = dialog.getBoundingClientRect();\n        if (\n          e.clientX < dialogDimensions.left ||\n          e.clientX > dialogDimensions.right ||\n          e.clientY < dialogDimensions.top ||\n          e.clientY > dialogDimensions.bottom\n        ) {\n          // Get e.target\n          const target = e.target;\n          // If e.target is not a button, close the modal\n          if (target.tagName !== \"BUTTON\") {\n            this.closeModal();\n          }\n        }\n      });\n\n      // Append navigation arrows and close button if it's a .modal element\n      if (dialog.classList.contains(\"modal\")) {\n        this.initializeModalGroup(dialog);\n        this.appendCloseButton(dialog);\n      }\n\n      // Dispatch an Event to the DataLayer\n      window.dataLayer = window.dataLayer || [];\n\n      dataLayer.push({\n        event: \"modalOpened\",\n        modalId: \"#\" + id,\n      });\n\n      // Add has-open-modal class to body\n      if (!document.body.classList.contains(\"has-open-modal\")) {\n        document.body.classList.add(\"has-open-modal\");\n      }\n    }\n  }\n\n  /**\n   * Appends navigation arrows to all modals in the same group as the given element.\n   * @param {HTMLElement} element - The modal element.\n   * @returns {void}\n   */\n  initializeModalGroup(element) {\n    const modalGroup = element.dataset.modalgroup;\n\n    // If the modal does not belong to a group, or it already has navigation arrows, return\n    if (!modalGroup || element.querySelector(\".modal-navigation\")) {\n      return;\n    }\n\n    const groupElements = document.querySelectorAll(\n      `[data-modalgroup=\"${modalGroup}\"]`\n    );\n\n    // Append navigation arrows to each element in the group\n    groupElements.forEach((groupElement, index) => {\n      this.appendArrows(groupElement, index, groupElements);\n    });\n  }\n  /**\n   * Appends a close button to a modal if one does not already exist.\n   * This is triggered on the modalOpen element, so that if modals are added dynamically, they will still have a close button.\n   * @param {HTMLElement} element - The modal to append a close button to.\n   * @returns {void}\n   */\n  appendCloseButton(element) {\n    if (!element.querySelector(\".modal-close\")) {\n      const closeButton = document.createElement(\"button\");\n      closeButton.classList.add(\"modal-close\");\n      closeButton.addEventListener(\"click\", this.closeModal);\n      closeButton.setAttribute(\"title\", \"Close this modal\");\n      element.append(closeButton);\n    }\n  }\n\n  /**\n   * Appends navigation arrows to a modal if it belongs to a group.\n   * @param {HTMLElement} element - The modal to append navigation arrows to.\n   * @param {number} index - The index of the modal in the group.\n   * @param {NodeList} modalGroup - The group of modals.\n   * @returns {void}\n   */\n  appendArrows(element, index, modalGroup) {\n    const wrapper = document.createElement(\"div\");\n    wrapper.classList.add(\"modal-navigation\");\n\n    // Create the previous button\n    const prevLink =\n      modalGroup[index === 0 ? modalGroup.length - 1 : index - 1];\n    const prevButton = this.createArrow(\n      \"Previous (Left arrow key)\",\n      `toggleModal('${prevLink.id}', true);`\n    );\n    prevButton.classList.add(\"modal-navigation--prev\");\n    wrapper.appendChild(prevButton);\n\n    // Create the next button\n    const nextLink =\n      modalGroup[index === modalGroup.length - 1 ? 0 : index + 1];\n    const nextButton = this.createArrow(\n      \"Next (Right arrow key)\",\n      `toggleModal('${nextLink.id}', true);`\n    );\n    nextButton.classList.add(\"modal-navigation--next\");\n    wrapper.appendChild(nextButton);\n\n    // Append the wrapper to the modal\n    element.appendChild(wrapper);\n  }\n\n  /**\n   * Creates a navigation button with the specified label and onclick attribute.\n   * @param {string} label - The label of the button.\n   * @param {string} onclick - The onclick attribute value.\n   * @returns {HTMLButtonElement} - The created button element.\n   */\n  createArrow(label, onclick) {\n    const button = document.createElement(\"button\");\n    button.classList.add(\"modal-navigation-button\");\n    button.setAttribute(\"onclick\", onclick);\n    button.setAttribute(\"title\", label);\n    return button;\n  }\n\n  /**\n   * Handles keyDown events\n   * @param {object} event - The event object.\n   * @returns\n   */\n  handleKeyDown(event) {\n    // Return if there is no open modal\n    if (!this.currentModalId) return;\n\n    if (event.repeat) return; // Prevents the event from firing multiple times if the user holds down the key\n\n    if (event.key === \"Escape\" && this.currentModalId) {\n      this.closeModal();\n    } else if (event.key === \"ArrowLeft\" && this.currentModalId) {\n      const dialog = document.getElementById(this.currentModalId);\n      if (dialog) {\n        // Find if it has a .modal-navigation--prev button\n        const prevButton = dialog.querySelector(\".modal-navigation--prev\");\n        if (prevButton) {\n          prevButton.click();\n        }\n      }\n    } else if (event.key === \"ArrowRight\" && this.currentModalId) {\n      const dialog = document.getElementById(this.currentModalId);\n      if (dialog) {\n        // Find if it has a .modal-navigation--next button\n        const nextButton = dialog.querySelector(\".modal-navigation--next\");\n        if (nextButton) {\n          nextButton.click();\n        }\n      }\n    }\n  }\n}\n\n// Initialize the class\nconst modalManager = new jellyfishModals();\n\n// Expose toggleModal outside the class\nconst toggleModal = (id, closeCurrent) =>\n  modalManager.toggleModal(id, closeCurrent);\n\n// Add eventListener for keydown\ndocument.addEventListener(\"keydown\", (event) =>\n  modalManager.handleKeyDown(event)\n);\n\n// TODO: Test that GTag events are firing correctly when modals are opened and closed\n","document.addEventListener(\"DOMContentLoaded\", function () {\n  var navbarHamburgers = document.querySelectorAll(\".navbar .hamburger\");\n\n  navbarHamburgers.forEach(function (hamburger) {\n    hamburger.addEventListener(\"click\", function (e) {\n      var navbar = this.closest(\".navbar\"),\n        navmenu = navbar.querySelector(\".navbar-menu\"),\n        navbarHamburgers = navbar.querySelectorAll(\".hamburger\");\n\n      // Only run if navbar exists\n      if (navmenu) {\n        if (navmenu.classList.contains(\"is-off-canvas\")) {\n          if (navmenu.classList.contains(\"is-active\")) {\n            navmenu.classList.add(\"closing\");\n            setTimeout(function () {\n              navmenu.classList.remove(\"closing\");\n            }, 550);\n          }\n          document.body.classList.toggle(\"has-active-nav\");\n        } else {\n          navmenu.style.display =\n            navmenu.style.display === \"none\" || navmenu.style.display === \"\"\n              ? \"block\"\n              : \"none\";\n        }\n\n        navmenu.classList.toggle(\"is-active\");\n\n        // Update hamburgers to reflect current state of menu\n        if (navbarHamburgers.length) {\n          navbarHamburgers.forEach(function (hamburger) {\n            var expanded = hamburger.getAttribute(\"aria-expanded\") === \"true\";\n            hamburger.setAttribute(\n              \"aria-expanded\",\n              expanded ? \"false\" : \"true\"\n            );\n            hamburger.classList.toggle(\"is-active\", !expanded);\n          });\n        }\n      }\n    });\n  });\n\n  // If a menu item with children is clicked...\n  document.addEventListener(\"click\", function (e) {\n    var target = e.target;\n    if (\n      target.matches(\n        \"li.has-children > a:not(.clicked), li.menu-item-has-children > a:not(.clicked)\"\n      )\n    ) {\n      // ...and the window width is smaller than the breakPoints.navBar\n      if (window.innerWidth < breakPoints.navBar) {\n        // add .clicked class to the anchor element\n        target.classList.add(\"clicked\");\n        // prevent the link from firing\n        e.preventDefault();\n        // add .drop-active class and aria-expanded to parent li\n        target.parentElement.classList.toggle(\"drop-active\");\n        target.parentElement.setAttribute(\n          \"aria-expanded\",\n          target.parentElement.classList.contains(\"drop-active\")\n            ? \"true\"\n            : \"false\"\n        );\n      }\n    }\n  });\n});\n","document.addEventListener(\"DOMContentLoaded\", function () {\n  var tables = document.querySelectorAll(\".is-responsive\");\n  if (tables.length > 0) {\n    // Loop through them\n    for (var i = 0; i < tables.length; i++) {\n      var thead = tables[i].querySelector(\"thead\");\n      var tbody = tables[i].querySelector(\"tbody\");\n      if (thead && tbody) {\n        // Get the innerhtml of all th elements inside the thead into an array\n        var ths = thead.querySelectorAll(\"th\");\n        var thsArray = [];\n        for (var j = 0; j < ths.length; j++) {\n          thsArray.push(ths[j].innerHTML);\n        }\n        if (thsArray.length > 0) {\n          // Loop through all tr elements inside the tbody\n          var trs = tbody.querySelectorAll(\"tr\");\n          for (var k = 0; k < trs.length; k++) {\n            // Loop through all td elements inside the tr\n            var tds = trs[k].querySelectorAll(\"td\");\n            for (var l = 0; l < tds.length; l++) {\n              // Add the th innerhtml as a data attribute to the td\n              tds[l].setAttribute(\"data-label\", thsArray[l]);\n            }\n          }\n        }\n      }\n    }\n  }\n});\n"]}