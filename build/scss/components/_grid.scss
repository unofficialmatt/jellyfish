/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
  GRID
  Contains the logic that builds
  Jellyfish's customisable grid
  system.
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

.container {
    margin: 0 auto;
    width: 100%;
    padding: 0 $base-container-gutter;
}
.row {
    @extend .clearfix;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    // Add negative margin to all rows, equal to half the col gutter - keeps things neatly aligned
    margin-left: -.5*$base-col-gutter;
    margin-right: -.5*$base-col-gutter;
}
$one_col: (100% / $cols);
.col {
    flex: 1 1 0px; // By default, flex columns will equally fill any space on the row
    min-height: 1px;
    max-width: 100%;
    position: relative;
    // give our cols l-r margin equal to half col gutter
    padding-left: .5*$base-col-gutter;
    padding-right: .5*$base-col-gutter;
}

// Remove column padding on collapsed rows/columns
.col.collapse,
.row.collapse > .col {
    padding-left: 0 !important;
    padding-right: 0 !important;
}
// Removes negative margin on collapsed rows
.row.collapse {
    margin-left: 0;
    margin-right: 0;
}
// Iterate for our smallest defined column class ($base-col-name)
@for $i from 1 through ($cols) {
    .#{$base-col-name}-#{$i} {
        width: ($one_col * $i);
    }
    @if $has_push_pull {
        $diff: 100% - ($one_col * $i);
        .push-#{$base-col-name}-#{$cols - $i} {
            left: $diff;
        }
        .pull-#{$base-col-name}-#{$cols - $i} {
            right: $diff;
        }
    }
    @if $has_offset {
        $offset: 100% - ($one_col * $i);
        .offset-#{$base-col-name}-#{$cols - $i} {
            margin-left: $offset;
        }
    }
}
@each $point,
$i in $breakpoints {
    // for each breakpoint defined...
    @include above($point) {
        // if a breakpoint is found, set media query min-width
        .container {
            // give our container a width/max width, and padding to border content
            width: bp-query($point, container-width);
            max-width: bp-query($point, container-max-width);
            padding-left: bp-query($point, container-gutter);
            padding-right: bp-query($point, container-gutter);
        }
        .row {
            // give our rows negative margin equal to half col gutter
            margin-left: -.5*(bp-query($point, col-gutter));
            margin-right: -.5*(bp-query($point, col-gutter));
        }
        .row.collapse-#{$point} {
            margin-left: 0;
            margin-right: 0;
            .col {
                padding-left: 0 !important;
                padding-right: 0 !important;
            }
        }
        .col {
            // give our cols l-r margin equal to half col gutter
            padding-left: .5*bp-query($point, col-gutter);
            padding-right: .5*bp-query($point, col-gutter);
        }
        @for $i from 1 through ($cols) {
            .#{$point}-#{$i} {
                max-width: ($one_col * $i);
                flex: 0 0 ($one_col * $i); // Define flex properties to fix the width of this col
            }
            @if $has_push_pull {
                $diff: 100% - ($one_col * $i);
                .push-#{$point}-#{$cols - $i} {
                    left: $diff;
                }
                .pull-#{$point}-#{$cols - $i} {
                    right: $diff;
                }
            }
            @if $has_offset {
                $offset: 100% - ($one_col * $i);
                .offset-#{$point}-#{$cols - $i} {
                    margin-left: $offset;
                }
            }
        }
        .jf-debug {
            @if $has_push_pull {
                [class*='pull-#{$point}'] {
                    border: 2px solid red !important;
                    border-left-width: 8px !important;
                }
                [class*='push-#{$point}'] {
                    border: 2px solid red !important;
                    border-right-width: 8px !important;
                }
                [class*='pull-#{$point}-0'],
                [class*='push-#{$point}-0'] {
                    border: 0; //Remove border on reset elements
                }
            }
            @if $has_offset {
                [class*='offset-#{$point}'] {
                    border: 2px solid red !important;
                    border-right-width: 8px !important;
                }
            }
        }
    }
    .hide-below {
        &-#{$point} {
            @include below($point) {
                display: none !important;
            }
        }
    }
    .hide-above {
        &-#{$point} {
            @include above($point) {
                display: none !important;
            }
        }
    }
}
.jf-debug {
    &::before {
        content: "#{$base-col-name}";
        position: fixed;
        top: 0;
        left: 0;
        padding: 10px;
        z-index: 10000;
        background: white;
        font-size: 12px;
        color: color(text-light);
        font-family: $font-secondary;
        @each $point,
        $i in $breakpoints {
            @include above($point) {
                content: "#{$point}";
            }
        }
    }
    .col {
        box-shadow: 0 1px 3px 1px rgba(#35fff0, .7) !important;
    }
    .row {
        box-shadow: 0 1px 3px 1px rgba(#ff00ff, .7) !important;
    }
    $one_col: (100% / $cols);
    .row {
        background: repeating-linear-gradient( to right, rgba(250, 250, 250, 0.5), rgba(250, 250, 250, 0.5) $one-col, rgba(245, 245, 245, 0.5) $one-col, rgba(245, 245, 245, 0.5) $one-col*2) !important;
        background-origin: content-box;
        .row {
            background: none;
        }
    }
}
