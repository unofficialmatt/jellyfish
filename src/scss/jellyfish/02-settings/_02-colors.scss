// Create empty maps. This allows the maps to be defined in the project's settings file to override and add any colors as required
$colors: () !default;
$theme-colors: () !default;
$background-colors: () !default;

$colors: map-merge(
  (
    primary: makeColorPalette(#554994),
    secondary: makeColorPalette(#cf447c),
    neutral: makeColorPalette(hsl(211, 12%, 49%)),
    success: makeColorPalette(#19c945),
    warning: makeColorPalette(#ddac24),
    error: makeColorPalette(#be2d2d),
  ),
  $colors
);

$color-white: #ffffff !default;
$color-black: get-color(neutral, 1000) !default;

// Merge default colours into the map
// Values can either be a string that matches a key from the $colors map, or a valid CSS value
$theme-colors: map-merge(
  (
    'primary': 'primary',
    'secondary': 'secondary',
    'success': 'success',
    'warning': 'warning',
    'error': 'error',
  ),
  $theme-colors
);

// Merge colors from $colors map into $background-colors if 'bg' is set to 'true'
@each $color-name, $color-pallette in $colors {
  @if map-get($color-pallette, 'bg') == 'true' {
    @each $key, $val in $color-pallette {
      @if $key == 'bg' {
        // DO NOTHING
      }
      @else {
        $background-colors: map-merge(
          (
            #{$color-name}-#{$key}: $val,
          ),
        $background-colors
        );
      }
    }
  }
}

// Merge default colours into the map
$background-colors: map-merge(
  (
    'white': $color-white,
  ),
  $background-colors
);

$color-text: $color-black !default;
$color-headings-preferred: get-color(neutral, 1000) !default;
