WORK OUT WHAT COMBINATION OF container/row/col are possible




/* 

_global.scss - ALL DOCUMENTED


DOCS - To DO;

- BASIC HTML
x- Typography (ref: _settings) include typefaces, base size and line height
x- Hierarchy
x- Headings
x- Paragraph margin
x- Paragraph alignment
x- Links
x- Text transform
x-- small, .small; .strong, .bold; em, .italic
x- Lists
x-- UL
x-- OL
x-- DL
x-- Nested

- UTILITIES
x- .hide
x- .invisible
x- Floats
x-- .clearfix
x-- Floating images



- GRID
-- Push / Pull (ref: _settings)
-- Offset (ref: _settings)
x- Debug mode (ref: _settings)
x- Breakpoints (ref: _settings) inc. breakpoint, container-width, font-size, line-height etc
x- briefly mention reset
x- How to use the grid (container, row, col)
x- Rows
x-- Padded Row
--- Nested
-- Flex
--- Flex Row
--- Flex Col
--- Flex align
x- Cols
x-- Setup (ref: _settings)
x- How it works intro
x- Collapse
--- Row
--- Col



- MIXINS (ref: _mixins)
x- Rem / Em
-- Bourbon? Can I remove this?
x- Vertical-Align
x- Media queries - above, between, below
x- Smooth





- NAV
-- nav_expands (ref: _settings)
-- How to use / set it up (eg. wrapped in a .nav-primary) etc
-- Burger menu




x- Colors (ref: _settings)
(include color mixin and how to use - it uses a map-get to return result)


-- SCSS structure


Javascript
-- smooth anchor scrolling (need to add this...)
-- Nav menu

*/


Utilitieis

Full Width
.full-width can be applied to any element to give it a width of 100%. !important is used to avoid any specificity issues.
This modifier is particularly useful on .row and .col elements





Debug Mode

Simply need to work out how to make a javascript function apply this for the demo.

Push/Pull

Perhaps rework so each row has one column only


Grid System

The underlying benefit of JELLYFISH is it's flexible approach to grid layout. You can define the precise amount of columns required, and on compile, the scss will produce all of the required code. So whether you want a 4 column , 7 column, 12 column or 3000 column grid (Not sure why you would want this...)  JELLYFISH has you covered. For the purposes of this demo, we are using the industry-standard 12 column grid - but feel free to go wild with a 5 column grid if your project requires it.

Column quantity is defined by the variable $cols in _settings.scss

Breakpoints

JELLYFISH is designed to be flexible and allow an infinite number of user-defined (and user-named) breakpoints which are defined through the $breakpoints map in _settings.scss. When compiled, the css  will automatically be created for any breakpoints defined in this map (columns and utilities eg. push/pull/offset/hide).

{CODE}
sm: (
        breakpoint: 550px,
        container-width: 100%,
        container-gutter: rem(0px),      
        col-gutter: rem(20px),
        base-font-size: 1.4em,
        base-line-height: 1.48
        ),
        
 
 By default breakpoints are named sm, md and lg however you can name breakpoints as you wish to suit your project requirements. For each breakpoint, the following variables must be defined (all others are optional - and an absence will inherit from the previous breakpoint):
 breakpoint
 container-width
 col-gutter
 
 Terminology
 breakpoint - the width at which the breakpoint will take affect. This must be provided in px and will be converted to an em value through the breakpoint mixin
 container-width - the width of the .container element at this breakpoint - should be provided as %, or rem. px should be converted to rem/em through the appropriate mixin.
 container-max-width - the max width of a container (good when used in conjunction with % based container-width) should be supplied as a rem or em value.
 container-gutter - padding applied to the left and right of the .container element - this should be provided as an em or rem value and can be converted via rem() or em().
 col-gutter - padding applied to the left and right of .col elements - this should be provided as an em or rem value and can be converted via rem() or em(). This must be provided as it's value is used in some of the grid math. (CHECK IF THIS IS ACTUALLY TRUE)
 base-font-size: Global base font size (applied to body) which will affect all elements sized with em. Useful for improving legibility at different breakpoints. This must be provided as an em value and can be converted from px via em()
 base-line-height: Global base line-height (applied to body) which will affect all elements that do not have a more specific line-height applied. Should be provided as a number or percent.
 
 Grid structure
 
 See _grid.scss for reference to how the JELLYFISH grid is compiled
 
 
 At the fundamental level, a grid is comprised of three elements:
 .container - a containing element with a fixed width
 .row - houses a number of .col elements and is automatically cleared with .clearfix to prevent flow issues
 .col - a single column element which can be extended with breakpoint based modifiers
 
 {EXAMPLE HERE}
 
 Based on the breakpoints defined in the breakpoint settings, .col elements can be targetted to change column widths at different breakpoints. These can be chained to make an element take different widths at different breakpoints, and are inherited from small upwards.
 
 Padded Row
 Applying an additional class of .row-padded will add (by default) 7rem padding top and bottom of a row element, to help increase white space.
 
 Nesting Rows / Columns
 Rows can be nested infinitely to allow for flexible layouts
 
 {EXAMPLE}
 
 
 
 MENTION HERE THAT AN ELEMENT CAN BE BOTH A CONTAINER AND ROW or a ROW and COL(!?)
 
 
 Collapsing Rows/Columns
 
 .collapse can be applied to a .row or .col element to collapse padding allowing edge-to-edge columns. When applied to a .row element it takes affect on all child .col elements. When applied to a .col element it applies to only that element.
 
 
 TO ADD
 
 .flex
 .col.flex
 .flex-align-center
 
 
 .col.reset-float
 
 
 
 MIXINS AND FUNCTIONS
 
 Vertical align
 
 Any element contained within a parent of known height can be vertically-centered with via @include vertical-align. For reference to the code, see _mixins.scss
 
 {Show Example}
 
 Breakpoint queries
 Styling can be applied to specific breakpoints using three breakpoint query mixins (see _mixins.scss for code reference).
 These queries are super flexible to accept values of $breakpoint name or px values (automatically converted to em)
 
 @include above($min) - Applies styles above the specified point until overriden by a higher breakpoint
 @include between($min, $max) - Applies styles between the two specified points
 @include below($max) - Applies styles up to the specified point. As a general rule, it's best to use (above) to avoid potential conflicts occuring
 
 Global Smoother Animation
 
 Use the mixin @include smooth($var) to apply global transition for a consistent UI feel. By default transition is 0.3s ease however this can be changed in _mixins.scss
 
 This mixin currently accepts only one variable - eg. all, width, color, font-size, etc
 
{Example useage}

Rem / Em

The functions rem($value) and em($value) defined in mixins/_rem.scss can be used to convert pixel measurements into rem and em respectively. This is a really useful plugin when an approximate pixel size is required - using rem will create an exact pixel conversion whereas using em will create a pixel conversion based on the current base-font-size (I THINK _ CHECK THIS)

JELLYFISH applies a font-size of 62.5% to the html element, which means that all rem values are based on a base font size of 10px which makes rem elements very easy to interpret - eg. 4rem is 40px.

Example conversions based on a body font size of 16px:

em(16px) = 1em
em(24px) =
etc
 
 
 
 CSS Reset
 JELLYFISH incorporates Eric Meyer's css reset in _reset.scss as well as setting all elements to use box-sizing: border box to allow pixel perfect layouts by default.
 
 
 Colours
 
 JELLYFISH makes use of a map for color values, to allow consistent color styling across projects, and an easy way to include colors on elements. Color settings are defined in the $colors map in _settings.scss and the function is defined in _mixins.scss
 
 Colors can be included on an element via the function color($color).
 Example:
 
 $colors: (
    text: #403F41
);

body {
 color: color(text);
 }
 
 
 
 NAVIGATION
 
 Jellyfish comes with a horizontal style primary navigation menu, which has a small amount of styling applied by default. The key features of the navigation menu are:
- responsive with customisable breakpoint
- single level or nested (out-of-the-box to one level, however  easy to extend)
- smooth animation on drop down
- collapse to burger menu on smaller screens 
- no duplication of HTML for smaller screens


Navigation structure

&how it works well with Wordpress



Navigation breakpoint
Jellyfish's navigation can be customised to 'kick in' at a breakpoint of your choosing - ie. changing from a collapsed burger menu to a full width tabbed design.
To customise the breakpoint, you will need to adjust $nav-expands in the _settings.scss file (must be a px value) as well as variable navPoint in assets/js/scripts.js

{Example}


 
 
 
 
 
 
 
 
 
 
 
 Demo specific files
 
 .demo
 
 
 
 
 