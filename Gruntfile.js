module.exports = function (grunt) {

  // GruntFile broken up to import partials from assets/grunt following guides at:
  // @link https://css-tricks.com/organizing-grunt-tasks/
  // @link https://css-tricks.com/lets-give-grunt-tasks-the-marie-kondo-organization-treatment/

  // Replaces grunt.loadNpmTasks to load grunt tasks from package.json
  require('load-grunt-tasks')(grunt);
  // TODO: Would like to use jit-grunt but it doesn't like the uglify-es module

  // Display timings of tasks
  require('time-grunt')(grunt);

  // Begin project config
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'), // Import package.json
    // Sets up global variables which will be used throughout the partials
    opts: {
      build_dir: 'assets',
      dist_dir: 'dist',
      banner:
      '/*! <%= pkg.name %> <%= pkg.version %>\n' +
      ' * Â© <%= grunt.template.today("yyyy-mm") %> <%= pkg.author.name %> - <%= pkg.author.url %> */\n',
    }
  });

  // Loads all tasks from the specified folder.
  // This has to run after initConfig() or it will have nothing to work with
  grunt.loadTasks('assets/grunt');

  //console.log(grunt.config()); // Comment in to debug the config

  // Register tasks
  grunt.registerTask('default', [ 'browserSync', 'watch' ]);
  grunt.registerTask('build', [ 'newer:copy:npm', 'eslint', 'concat', 'uglify', 'import_sass_from_dirs', 'sass', 'postcss', 'usebanner', 'clean', 'imagemin' ]);
  grunt.registerTask('init', [ 'build', 'default' ]);

  grunt.registerMultiTask(
    'import_sass_from_dirs',
    'Write SASS @import statements to a single file to include a directory\'s entire contents dynamically.',
    function () {
        var files = this.filesSrc;
        var quiet = this.options().quiet;
        files.forEach(function (filepath) {
            var oldFileContents = grunt.file.read(filepath);
            // Create an array that we'll ultimately use to populate our includes file
            var newFileContents = [
                // Header
                '// This file imports all other underscore-prefixed .scss files in this directory and sub-directories.',
                '// It is automatically generated by the grunt import_sass_from_dirs task.',
                '// Do not directly modify this file.',
                ''
            ];
            var directory = filepath.substring(0, filepath.lastIndexOf('/'));

            // Search for underscore prefixed scss files
            // Then remove the file we're writing the imports to from that set
            var filesToInclude = grunt.file.expand([directory + '/_*.scss', directory + '/**/_*.scss', directory + '/**/**/_*.scss', '!' + filepath]);

            if (!quiet) {
                grunt.log.writeln('\n' + filepath.yellow + ':');
            }

            if (!quiet && !filesToInclude.length) {
                grunt.log.writeln('No files found in ' + directory.cyan + ' to import.');
            }

            filesToInclude.forEach(function (includeFilepath) {

                // The include file is the filepath minus the directory slash and the
                // initial underscore

                var includeFile = includeFilepath.replace(directory + '/', '');

                // Remove .scss extension
                includeFile = includeFile.replace('/_', '/');
                includeFile = includeFile.replace('.scss', '');
                if (includeFile[0] === '_') {
                  includeFile = includeFile.substring(1);
                }

                if (!quiet) {
                    grunt.log.writeln('Importing ' + includeFile.cyan);
                }

                newFileContents.push('@import "' + includeFile + '";');
            });

            newFileContents = newFileContents.join('\n');
            if (newFileContents === oldFileContents) {
              grunt.log.writeln('\n' + ' No change in ' + filepath.yellow + ':');
            } else {
            grunt.file.write(filepath, newFileContents);
            }
        });
    }
  );

};

// TODO: Add Grunt Bump?
